import os
import sqlite3
import datetime
import base64
from io import BytesIO
from openai import OpenAI
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue
)
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
client = OpenAI()
client.api_key = OPENAI_API_KEY

# –£–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —á–∞—Ç
ALLOWED_CHAT_ID =  -1002370287106

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
def log_interaction(user_id, chat_id, username, request, response):
    conn = sqlite3.connect('bot_stats.db')
    c = conn.cursor()
    c.execute('''
        INSERT INTO interactions (user_id, chat_id, username, request, response)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, chat_id, username, request, response))
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∞–º —á–∞—Ç
    # if update.effective_chat.id != ALLOWED_CHAT_ID:
    #     return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo_file = await update.message.photo[-1].get_file()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes
        photo_bytes = await photo_file.download_as_bytearray()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        base64_image = base64.b64encode(photo_bytes).decode('utf-8')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT-4 —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system", 
                    "content": "–ü—Ä–∏–¥—É–º–∞–π —Å–º–µ—à–Ω—É—é –ø–æ–¥–ø–∏—Å—å –∏–ª–∏ —à—É—Ç–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –æ—Å—Ç—Ä–æ—É–º–Ω—ã–º."
                },
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": "–û–ø–∏—à–∏ —Ñ–æ—Ç–æ –≤ —à—É—Ç–æ—á–Ω–æ–π –º–∞–Ω–µ—Ä–µ, —á—Ç–æ–±—ã –±—ã–ª–æ —Å–º–µ—à–Ω–æ"},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{base64_image}"
                            }
                        }
                    ]
                }
            ],
            max_tokens=500
        )
        
        joke = response.choices[0].message.content
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        log_interaction(
            update.effective_user.id,
            update.effective_chat.id,
            update.effective_user.username,
            "[PHOTO]",
            joke
        )
        
        await update.message.reply_text(f"üì∏ –®—É—Ç–∫–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:\n\n{joke}")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ: {str(e)}")

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

